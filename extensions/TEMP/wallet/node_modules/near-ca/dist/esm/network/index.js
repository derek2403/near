import { createPublicClient, http } from "viem";
import * as chains from "viem/chains";
import { CHAIN_INFO } from "./constants";
// Viem defaults are known to be unreliable.
const rpcOverrides = {
    43114: "https://rpc.ankr.com/avalanche",
    11155111: "https://ethereum-sepolia-rpc.publicnode.com",
};
// We support all networks exported by viem
const SUPPORTED_NETWORKS = createNetworkMap(Object.values(chains));
/**
 * Leveraging Network Data provided from through viem
 * This class makes all relevant network fields accessible dynamically by chain ID.
 */
export class Network {
    name;
    rpcUrl;
    chainId;
    scanUrl;
    client;
    icon;
    testnet;
    nativeCurrency;
    constructor({ name, rpcUrl, chainId, scanUrl, nativeCurrency, icon, }) {
        const network = SUPPORTED_NETWORKS[chainId];
        this.name = name;
        this.rpcUrl = rpcUrl;
        this.chainId = chainId;
        this.scanUrl = scanUrl;
        this.client = createPublicClient({
            transport: http(network.rpcUrl),
        });
        this.testnet = network.testnet;
        this.nativeCurrency = nativeCurrency;
        this.icon = icon;
    }
    static fromChainId(chainId, options = {}) {
        const networkFields = SUPPORTED_NETWORKS[chainId];
        if (!networkFields) {
            throw new Error(`Network with chainId ${chainId} is not supported.
        Please reach out to the developers of https://github.com/bitteprotocol/near-ca`);
        }
        const mergedFields = {
            ...networkFields,
            // Manual Settings.
            rpcUrl: options.rpcUrl || networkFields.rpcUrl,
            scanUrl: options.scanUrl || networkFields.scanUrl,
        };
        return new Network(mergedFields);
    }
}
/// Dynamically generate network map accessible by chainId.
function createNetworkMap(supportedNetworks) {
    const networkMap = {};
    supportedNetworks.forEach((network) => {
        const chainInfo = CHAIN_INFO[network.id];
        const icon = chainInfo?.icon || `/${network.nativeCurrency.symbol}.svg`;
        networkMap[network.id] = {
            name: network.name,
            rpcUrl: rpcOverrides[network.id] || network.rpcUrls.default.http[0],
            chainId: network.id,
            scanUrl: network.blockExplorers?.default.url || "",
            icon,
            testnet: network.testnet || false,
            nativeCurrency: {
                ...network.nativeCurrency,
                wrappedAddress: chainInfo?.wrappedToken,
                icon: chainInfo?.currencyIcon || icon,
            },
        };
    });
    return networkMap;
}
export function isTestnet(chainId) {
    return Network.fromChainId(chainId).testnet;
}
