"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
exports.isTestnet = isTestnet;
const viem_1 = require("viem");
const chains = __importStar(require("viem/chains"));
const constants_1 = require("./constants");
// Viem defaults are known to be unreliable.
const rpcOverrides = {
    43114: "https://rpc.ankr.com/avalanche",
    11155111: "https://ethereum-sepolia-rpc.publicnode.com",
};
// We support all networks exported by viem
const SUPPORTED_NETWORKS = createNetworkMap(Object.values(chains));
/**
 * Leveraging Network Data provided from through viem
 * This class makes all relevant network fields accessible dynamically by chain ID.
 */
class Network {
    constructor({ name, rpcUrl, chainId, scanUrl, nativeCurrency, icon, }) {
        const network = SUPPORTED_NETWORKS[chainId];
        this.name = name;
        this.rpcUrl = rpcUrl;
        this.chainId = chainId;
        this.scanUrl = scanUrl;
        this.client = (0, viem_1.createPublicClient)({
            transport: (0, viem_1.http)(network.rpcUrl),
        });
        this.testnet = network.testnet;
        this.nativeCurrency = nativeCurrency;
        this.icon = icon;
    }
    static fromChainId(chainId, options = {}) {
        const networkFields = SUPPORTED_NETWORKS[chainId];
        if (!networkFields) {
            throw new Error(`Network with chainId ${chainId} is not supported.
        Please reach out to the developers of https://github.com/bitteprotocol/near-ca`);
        }
        const mergedFields = {
            ...networkFields,
            // Manual Settings.
            rpcUrl: options.rpcUrl || networkFields.rpcUrl,
            scanUrl: options.scanUrl || networkFields.scanUrl,
        };
        return new Network(mergedFields);
    }
}
exports.Network = Network;
/// Dynamically generate network map accessible by chainId.
function createNetworkMap(supportedNetworks) {
    const networkMap = {};
    supportedNetworks.forEach((network) => {
        const chainInfo = constants_1.CHAIN_INFO[network.id];
        const icon = chainInfo?.icon || `/${network.nativeCurrency.symbol}.svg`;
        networkMap[network.id] = {
            name: network.name,
            rpcUrl: rpcOverrides[network.id] || network.rpcUrls.default.http[0],
            chainId: network.id,
            scanUrl: network.blockExplorers?.default.url || "",
            icon,
            testnet: network.testnet || false,
            nativeCurrency: {
                ...network.nativeCurrency,
                wrappedAddress: chainInfo?.wrappedToken,
                icon: chainInfo?.currencyIcon || icon,
            },
        };
    });
    return networkMap;
}
function isTestnet(chainId) {
    return Network.fromChainId(chainId).testnet;
}
